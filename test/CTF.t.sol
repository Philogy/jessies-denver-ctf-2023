// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

/*
pragma solidity ^0.4.0;

contract CTF {
    uint256 public ownerSlot = uint256(sha256("jessies.hackerhouse.owner"));
    uint256[] public myArray;

    function write(uint256 i, uint256 v) public {
        myArray[i] = v;
    }

    function pop() public {
        myArray.length--;
    }

    function flagCaptured() public returns (bool) {
        uint256 owner;

        uint256 slot = ownerSlot;
        assembly {
            owner := sload(slot)
        }

        return (msg.sender == address(owner));
    }
}

compiles to 6060604052600260405180807f6a6573736965732e6861636b6572686f7573652e6f776e65720000000000000081526020015060190190506020604051808303816000866161da5a03f11560025750506040518051906020015060019004600060005055610224806100716000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480632ef05a4f146100685780639c0e3f7a14610092578063a4ece52c146100b8578063bc60e741146100cc578063cc3e57d9146100f457610063565b610002565b346100025761007a6004805050610125565b60405180821515815260200191505060405180910390f35b34610002576100b66004808035906020019091908035906020019091905050610172565b005b34610002576100ca600480505061019a565b005b34610002576100de60048050506101f6565b6040518082815260200191505060405180910390f35b346100025761010f60048080359060200190919050506101ff565b6040518082815260200191505060405180910390f35b6000600060006000600050549050805491508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614925061016d565b505090565b80600160005083815481101561000257906000526020600020900160005b50819055505b5050565b600160005080548091906001900390908154818355818115116101ef578183600052602060002091820191016101ee91906101d0565b808211156101ea57600081815060009055506001016101d0565b5090565b5b505050505b565b60006000505481565b600160005081815481101561000257906000526020600020900160005b91509050548156
*/

interface CTF {
    function write(uint256 i, uint256 v) external;
    function pop() external;
    function flagCaptured() external returns (bool);
}

contract CTFTest is Test {
    CTF ctf;

    function setUp() public {
        address deployed;
        bytes memory bytecode = hex"6060604052600260405180807f6a6573736965732e6861636b6572686f7573652e6f776e65720000000000000081526020015060190190506020604051808303816000866161da5a03f11560025750506040518051906020015060019004600060005055610224806100716000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480632ef05a4f146100685780639c0e3f7a14610092578063a4ece52c146100b8578063bc60e741146100cc578063cc3e57d9146100f457610063565b610002565b346100025761007a6004805050610125565b60405180821515815260200191505060405180910390f35b34610002576100b66004808035906020019091908035906020019091905050610172565b005b34610002576100ca600480505061019a565b005b34610002576100de60048050506101f6565b6040518082815260200191505060405180910390f35b346100025761010f60048080359060200190919050506101ff565b6040518082815260200191505060405180910390f35b6000600060006000600050549050805491508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614925061016d565b505090565b80600160005083815481101561000257906000526020600020900160005b50819055505b5050565b600160005080548091906001900390908154818355818115116101ef578183600052602060002091820191016101ee91906101d0565b808211156101ea57600081815060009055506001016101d0565b5090565b5b505050505b565b60006000505481565b600160005081815481101561000257906000526020600020900160005b91509050548156";
        assembly {
            deployed := create(0, add(bytecode, 0x20), mload(bytecode))
        }

        ctf = CTF(deployed);
    }

    function testFlagCaptured() public {
        assertTrue(ctf.flagCaptured());
    }
}
